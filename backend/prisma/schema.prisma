// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ENUMS

enum Language {
  sr
  en
}

enum Role {
  user
  admin
}

enum AppointmentStatus {
  scheduled
  completed
  canceled
  no_show
}

enum InvitationStatus {
  pending
  accepted
  revoked
  code_verified
 
}

// MODELS

model Invitation {
  id String @id @default(uuid())
  token String @unique @db.Text
  email String @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invitationStatus InvitationStatus @default(pending)
  user User?
  code Int? 
  codeExpiresAt DateTime?

  @@map("invitation")
}

model Token {
  id String @id @default(uuid())
  token String @unique @db.Text
  userId String
  expiresAt DateTime
  isRevoked Boolean @default(false)
  user User[]

  @@map("token")
}

model ExpoPushToken {
  id String @id @default(uuid())
  token String @unique
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Restrict)
  @@map("pushToken")
}

model NotificationRecipes {
  id String @id  @default(uuid())
  pushToken String 
  status String
  userId String?
  sentAt DateTime @default(now())
  expoTicketId String?
  isProcessed Boolean @default(false)
  recipeDetails String?

  @@unique([expoTicketId]) 

  @@map("notification_receipt")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  first_name String
  last_name String
  avatar String?
  avatarVersion String?
  invitationId String? @unique
  invitation Invitation? @relation( fields: [invitationId], references: [id])
  token Token[]
  pushTokens ExpoPushToken[]
  role Role @default(user) 
  appointments Appointment[]
  notes Note[]
  createdAt DateTime @default(now())
  is_online Boolean?
  last_seen DateTime?
  deletedAt DateTime?
  preferredLanguage Language @default(sr)
  @@map("user")
}


model Appointment {
  id String @id @default(uuid())
  appNumber Int @default(autoincrement())
  title String
  description String? @db.Text
  status AppointmentStatus @default(scheduled)
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Restrict)
  external_client String? 
  startDateTime DateTime
  endDateTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointment")
} 

model Note {
  id String @id @default(uuid())
  title String
  content String @db.Text
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("note")

}
